package com.yly.asmprocessor

import com.yly.asmannotation.LoginCallback
import javax.annotation.processing.*
import javax.lang.model.SourceVersion
import javax.lang.model.element.Element
import javax.lang.model.element.TypeElement
import javax.lang.model.util.Elements
import javax.tools.Diagnostic

@SupportedSourceVersion(SourceVersion.RELEASE_8)
class AsmProcessor : AbstractProcessor() {

    private lateinit var mFiler: Filer
    private lateinit var mMessager: Messager
    private lateinit var mElementUtils: Elements

    override fun init(processingEnv: ProcessingEnvironment) {
        mFiler = processingEnv.filer
        mMessager = processingEnv.messager
        mElementUtils = processingEnv.elementUtils
        super.init(processingEnv)
    }

    override fun process(
            annotations: MutableSet<out TypeElement>,
            roundEnv: RoundEnvironment
    ): Boolean {
        val elements = roundEnv.getElementsAnnotatedWith(LoginCallback::class.java)
        if (elements.isNullOrEmpty() || elements.size > 1) {
            return false
        }
        createFile(elements.elementAt(0))
        return false
    }

    override fun getSupportedAnnotationTypes(): MutableSet<String> {
        return mutableSetOf(LoginCallback::class.java.canonicalName)
    }

    /**
     * 创建文件
     */
    private fun createFile(element: Element) {
        //包名
        val pkgName = "com.yly.utils"
        //生成文件内容
        val builder = StringBuilder().apply {
            append("package $pkgName;\n\n")
            append("//Auto generated by kapt,do not modify!!\n\n")
            append("""
public class LoginChecker {
    
    private LoginChecker(){};

    private static volatile LoginChecker loginChecker;

    public static LoginChecker getInstance() {
        if (loginChecker == null) {
            synchronized (LoginChecker.class) {
                if (loginChecker == null) {
                    loginChecker = new LoginChecker();
                }
            }
        }
        return loginChecker;
    }

   public boolean isLogin() {
        return ${element}.INSTANCE.appLogined();
    }
    
    public void unloginCallback() {
         ${element}.INSTANCE.unloginCallback();
    }
}
           """.trimIndent())
        }
        try {
            val jfo = mFiler.createSourceFile("$pkgName.LoginChecker", null)
            jfo.openWriter().apply {
                write(builder.toString())
                flush()
                close()
            }
        } catch (e: Exception) {
            e.printStackTrace();
        }
    }

    /**
     * 日志打印
     */
    private fun log(log: String) {
        mMessager.printMessage(Diagnostic.Kind.WARNING, log)
    }

}
